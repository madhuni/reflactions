When would you want to use a remote repository rather than keeping all your work
local?
    I will like to use the remote repository when I need to save my work for being lost.
    When we are connecting to the remote repository, we are on the safer side that our work
    and all the commits done will remain safe and can be accesible whenever we want and also
    when we want other people also to work on our project or code, then it's necessary for
    the code to be there in remote so that other people can also access the code and do the 
    necessary changes required to build the project.    

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?
	Yes correct, I don't want that chages done by another person will get
	synced in my local too which I don't know yet. Without my knowledge if
	anything will add it may create conflicts in my code as well. I might
	not want this thing that Git will automatically sync with my repo.    

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    We can fork any repo if it's already present on the GitHub as "Fork" is
    purely GitHub innovation. We can clone any directory to local by giving
    it's url. The difference b/w fork and the clone is that we can Fork any
    repo if it's present in the GitHub server, but we can always clone any
    of the repositoy to our local no matter it's present on git or not.
    Branch is basically a commit which is separted with the Master. It 
    contains all the work done in Master till date when the branch is made.
    We can do any kind of change in the branch without affecting the 
    Master branch.
    
What is the benefit of having a copy of the last known state of the remote
stored locally?

    Fill in your answer here

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Fill in your answer here

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    It will be good to make a branch and do the changes rather than making the changes directly in 
    the master. As it will give the more flexibility and freedom to experiment without affecting
    our original code. And once everything is done and successfully experimented then we can
    merge our new experimented code with our master and can make the flow flawless without 
    any risk.